
==================== FINAL INTERFACE ====================
2016-02-25 11:03:07.917186 UTC

interface memca_3Z8qUpsEDiC53dYw3oq6HZ:Database.Memcache.Errors 7103
  interface hash: 411a220e587b6e956e0cd8732fbca59d
  ABI hash: f8f7d6f9d99620e8545ec26851698f07
  export-list hash: a3cc4d4a1d68c42bd6d48dd70317f453
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 67c4bc6e3498921d447d337f3236ee3e
  sig of: Nothing
  used TH splices: False
  where
exports:
  Database.Memcache.Errors.statusToError
  Database.Memcache.Errors.throwIncorrectRes
  Database.Memcache.Errors.throwStatus
  Database.Memcache.Errors.ClientError{Database.Memcache.Errors.NotEnoughBytes}
  Database.Memcache.Errors.MemcacheError{Database.Memcache.Errors.MemErrAuthFail Database.Memcache.Errors.MemErrInvalidArgs Database.Memcache.Errors.MemErrKeyExists Database.Memcache.Errors.MemErrNoKey Database.Memcache.Errors.MemErrOutOfMemory Database.Memcache.Errors.MemErrStoreFailed Database.Memcache.Errors.MemErrUnknownCmd Database.Memcache.Errors.MemErrValueNonNumeric Database.Memcache.Errors.MemErrValueTooLarge}
module dependencies: Database.Memcache.Types
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Control.Exception e9090e246fba030faecf7b81b3e8e320
import  -/  base-4.8.2.0:Data.Typeable c3fcb0780ec05399195ad3277b18d294
import  -/  base-4.8.2.0:Data.Typeable.Internal 76b09e88499fa4ff7869a34e89976afb
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Exception 18c46fe9c5c0c3a120035f264ef32d41
import  -/  base-4.8.2.0:GHC.IO bb5b81adcea33b14bd4abe16d7dde45f
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  Database.Memcache.Types 1ca9931bda88d72b9d7d6f6ee335bcb6
  exports: b2f7697915662eeadb8e65de002e666b
  ErrInvalidArgs 6e9b1b49b055d1802a3d750175599397
  ErrItemNotStored adebb0d55034ae5028bffa5ebbda4473
  ErrKeyExists 5231ffa983e267e4412dffb55a559f27
  ErrKeyNotFound 04a096dd54702e9cc95efe88e1001002
  ErrOutOfMemory 7ad701efe6c7472406b2b5f9fc2d9f79
  ErrUnknownCommand 1e9d8a62649ecd6b23f30fbce44b4678
  ErrValueNonNumeric cae9ef3d6c799554de20936eb097d5f6
  ErrValueTooLarge 546742e025ef5eb7b5be609e62bb11e6
  IncorrectResponse b3321c6c20eb0dae752209fd97512fc8
  NoError ec1b5aef072751e44f93fec6d161ed3d
  Response 900e0e3188debaef4afb10615d76a76e
  SaslAuthContinue b5095cf6e4fafc0a442a3d5eb86aec09
  SaslAuthFail a3090c32869bcc5e7ae6e3d4d5acdde5
  Status f71e7ee459bd0dad4eebf489e8fa8742
  increspActual 880530c0f85397801aa74b6cc48d8582
  increspMessage 2ea50ec0b67dbac5f82f268f6b350f20
  resOp ab0836dc5e0d6b259d4d7b4ced85fd46
fe05b8b9d6c9f7cff2e94ac63b9e5990
  $fEqClientError ::
    GHC.Classes.Eq Database.Memcache.Errors.ClientError
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Database.Memcache.Errors.ClientError
                  Database.Memcache.Errors.$fEqClientError_$c==
                  Database.Memcache.Errors.$fEqClientError_$c/= -}
fe05b8b9d6c9f7cff2e94ac63b9e5990
  $fEqClientError_$c/= ::
    Database.Memcache.Errors.ClientError
    -> Database.Memcache.Errors.ClientError -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ a2 :: Database.Memcache.Errors.ClientError
                   b :: Database.Memcache.Errors.ClientError ->
                 case a2 of wild { Database.Memcache.Errors.NotEnoughBytes ->
                 case b of wild1 { Database.Memcache.Errors.NotEnoughBytes ->
                 GHC.Types.False } }) -}
fe05b8b9d6c9f7cff2e94ac63b9e5990
  $fEqClientError_$c== ::
    Database.Memcache.Errors.ClientError
    -> Database.Memcache.Errors.ClientError -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Database.Memcache.Errors.ClientError
                   ds1 :: Database.Memcache.Errors.ClientError ->
                 case ds of wild { Database.Memcache.Errors.NotEnoughBytes ->
                 case ds1 of wild1 { Database.Memcache.Errors.NotEnoughBytes ->
                 GHC.Types.True } }) -}
b7291049f3eecbbd1edd21fd38d153d3
  $fEqMemcacheError ::
    GHC.Classes.Eq Database.Memcache.Errors.MemcacheError
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Database.Memcache.Errors.MemcacheError
                  Database.Memcache.Errors.$fEqMemcacheError_$c==
                  Database.Memcache.Errors.$fEqMemcacheError_$c/= -}
b7291049f3eecbbd1edd21fd38d153d3
  $fEqMemcacheError_$c/= ::
    Database.Memcache.Errors.MemcacheError
    -> Database.Memcache.Errors.MemcacheError -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a2 :: Database.Memcache.Errors.MemcacheError
                   b :: Database.Memcache.Errors.MemcacheError ->
                 case a2 of wild {
                   Database.Memcache.Errors.MemErrNoKey
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Database.Memcache.Errors.MemErrNoKey -> GHC.Types.False }
                   Database.Memcache.Errors.MemErrKeyExists
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Database.Memcache.Errors.MemErrKeyExists -> GHC.Types.False }
                   Database.Memcache.Errors.MemErrValueTooLarge
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Database.Memcache.Errors.MemErrValueTooLarge -> GHC.Types.False }
                   Database.Memcache.Errors.MemErrInvalidArgs
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Database.Memcache.Errors.MemErrInvalidArgs -> GHC.Types.False }
                   Database.Memcache.Errors.MemErrStoreFailed
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Database.Memcache.Errors.MemErrStoreFailed -> GHC.Types.False }
                   Database.Memcache.Errors.MemErrValueNonNumeric
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Database.Memcache.Errors.MemErrValueNonNumeric -> GHC.Types.False }
                   Database.Memcache.Errors.MemErrUnknownCmd
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Database.Memcache.Errors.MemErrUnknownCmd -> GHC.Types.False }
                   Database.Memcache.Errors.MemErrOutOfMemory
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Database.Memcache.Errors.MemErrOutOfMemory -> GHC.Types.False }
                   Database.Memcache.Errors.MemErrAuthFail
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Database.Memcache.Errors.MemErrAuthFail -> GHC.Types.False } }) -}
b7291049f3eecbbd1edd21fd38d153d3
  $fEqMemcacheError_$c== ::
    Database.Memcache.Errors.MemcacheError
    -> Database.Memcache.Errors.MemcacheError -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: Database.Memcache.Errors.MemcacheError
                   ds1 :: Database.Memcache.Errors.MemcacheError ->
                 case ds of wild {
                   Database.Memcache.Errors.MemErrNoKey
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Database.Memcache.Errors.MemErrNoKey -> GHC.Types.True }
                   Database.Memcache.Errors.MemErrKeyExists
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Database.Memcache.Errors.MemErrKeyExists -> GHC.Types.True }
                   Database.Memcache.Errors.MemErrValueTooLarge
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Database.Memcache.Errors.MemErrValueTooLarge -> GHC.Types.True }
                   Database.Memcache.Errors.MemErrInvalidArgs
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Database.Memcache.Errors.MemErrInvalidArgs -> GHC.Types.True }
                   Database.Memcache.Errors.MemErrStoreFailed
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Database.Memcache.Errors.MemErrStoreFailed -> GHC.Types.True }
                   Database.Memcache.Errors.MemErrValueNonNumeric
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Database.Memcache.Errors.MemErrValueNonNumeric -> GHC.Types.True }
                   Database.Memcache.Errors.MemErrUnknownCmd
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Database.Memcache.Errors.MemErrUnknownCmd -> GHC.Types.True }
                   Database.Memcache.Errors.MemErrOutOfMemory
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Database.Memcache.Errors.MemErrOutOfMemory -> GHC.Types.True }
                   Database.Memcache.Errors.MemErrAuthFail
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Database.Memcache.Errors.MemErrAuthFail -> GHC.Types.True } }) -}
fe05b8b9d6c9f7cff2e94ac63b9e5990
  $fExceptionClientError ::
    GHC.Exception.Exception Database.Memcache.Errors.ClientError
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Database.Memcache.Errors.ClientError
                  Database.Memcache.Errors.$fExceptionClientError2
                  Database.Memcache.Errors.$fShowClientError
                  Database.Memcache.Errors.$fExceptionClientError_$ctoException
                  Database.Memcache.Errors.$fExceptionClientError_$cfromException
                  Database.Memcache.Errors.$fExceptionClientError_$cdisplayException -}
2ffc9783c491d847e4afa243eb597087
  $fExceptionClientError1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NotEnoughBytes"#) -}
fe05b8b9d6c9f7cff2e94ac63b9e5990
  $fExceptionClientError2 ::
    Data.Typeable.Internal.Typeable
      Database.Memcache.Errors.ClientError
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                Database.Memcache.Errors.$fExceptionClientError3
                  `cast`
                (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                          <*>_N <Database.Memcache.Errors.ClientError>_N)) -}
fe05b8b9d6c9f7cff2e94ac63b9e5990
  $fExceptionClientError3 ::
    GHC.Prim.Proxy# Database.Memcache.Errors.ClientError
    -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ wild :: GHC.Prim.Proxy# Database.Memcache.Errors.ClientError ->
                 Database.Memcache.Errors.$fExceptionClientError4) -}
794211d35a0392eacd47d74c4545c398
  $fExceptionClientError4 :: Data.Typeable.Internal.TypeRep
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TypeRep
                   __word 13893723194800681245
                   __word 12903151637907167929
                   Database.Memcache.Errors.$fExceptionClientError_wild
                   (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
fe05b8b9d6c9f7cff2e94ac63b9e5990
  $fExceptionClientError_$cdisplayException ::
    Database.Memcache.Errors.ClientError -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (0, True, True)
                Database.Memcache.Errors.$fExceptionClientError_$cshow -}
fe05b8b9d6c9f7cff2e94ac63b9e5990
  $fExceptionClientError_$cfromException ::
    GHC.Exception.SomeException
    -> GHC.Base.Maybe Database.Memcache.Errors.ClientError
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ eta :: GHC.Exception.SomeException ->
                 case eta of wild { GHC.Exception.SomeException e10 $dException1 e2 ->
                 case (GHC.Exception.$p1Exception @ e10 $dException1)
                        `cast`
                      (Data.Typeable.Internal.NTCo:Typeable[0] <*>_N <e10>_N)
                        (GHC.Prim.proxy#
                           @ *
                           @ e10) of wild1 { Data.Typeable.Internal.TypeRep dt dt1 ds2 ds3 ds4 ->
                 case dt of wild2 {
                   DEFAULT -> GHC.Base.Nothing @ Database.Memcache.Errors.ClientError
                   __word 13893723194800681245
                   -> case dt1 of wild3 {
                        DEFAULT -> GHC.Base.Nothing @ Database.Memcache.Errors.ClientError
                        __word 12903151637907167929
                        -> GHC.Base.Just
                             @ Database.Memcache.Errors.ClientError
                             e2
                               `cast`
                             (UnivCo mkUnsafeCo representational e10 Database.Memcache.Errors.ClientError) } } } }) -}
fe05b8b9d6c9f7cff2e94ac63b9e5990
  $fExceptionClientError_$cshow ::
    Database.Memcache.Errors.ClientError -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Database.Memcache.Errors.ClientError ->
                 case x of wild { Database.Memcache.Errors.NotEnoughBytes ->
                 Database.Memcache.Errors.$fExceptionClientError1 }) -}
fe05b8b9d6c9f7cff2e94ac63b9e5990
  $fExceptionClientError_$ctoException ::
    Database.Memcache.Errors.ClientError -> GHC.Exception.SomeException
  {- Arity: 1 -}
c08955e3227522b4ef092415f74d2131
  $fExceptionClientError_wild :: Data.Typeable.Internal.TyCon
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TyCon
                   __word 13893723194800681245
                   __word 12903151637907167929
                   Database.Memcache.Errors.$fExceptionClientError_ww3
                   Database.Memcache.Errors.$fExceptionClientError_ww1
                   Database.Memcache.Errors.$fExceptionClientError_ww4) -}
fce0711ad65abb518963daa79a274d66
  $fExceptionClientError_ww1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "Database.Memcache.Errors"#) -}
07b03f257ea753316e2e02890b3085e3
  $fExceptionClientError_ww3 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "memca_3Z8qUpsEDiC53dYw3oq6HZ"#) -}
8cba62b4a301d8ff374676cd74298918
  $fExceptionClientError_ww4 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "ClientError"#) -}
b7291049f3eecbbd1edd21fd38d153d3
  $fExceptionMemcacheError ::
    GHC.Exception.Exception Database.Memcache.Errors.MemcacheError
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Database.Memcache.Errors.MemcacheError
                  Database.Memcache.Errors.$fExceptionMemcacheError10
                  Database.Memcache.Errors.$fShowMemcacheError
                  Database.Memcache.Errors.$fExceptionMemcacheError_$ctoException
                  Database.Memcache.Errors.$fExceptionMemcacheError_$cfromException
                  Database.Memcache.Errors.$fExceptionMemcacheError_$cdisplayException -}
4352fb025a817b5d539a652661772e80
  $fExceptionMemcacheError1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MemErrAuthFail"#) -}
b7291049f3eecbbd1edd21fd38d153d3
  $fExceptionMemcacheError10 ::
    Data.Typeable.Internal.Typeable
      Database.Memcache.Errors.MemcacheError
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                Database.Memcache.Errors.$fExceptionMemcacheError11
                  `cast`
                (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                          <*>_N <Database.Memcache.Errors.MemcacheError>_N)) -}
b7291049f3eecbbd1edd21fd38d153d3
  $fExceptionMemcacheError11 ::
    GHC.Prim.Proxy# Database.Memcache.Errors.MemcacheError
    -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ wild :: GHC.Prim.Proxy#
                             Database.Memcache.Errors.MemcacheError ->
                 Database.Memcache.Errors.$fExceptionMemcacheError12) -}
9c46b753e64f62af1359deb046b5c8de
  $fExceptionMemcacheError12 :: Data.Typeable.Internal.TypeRep
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TypeRep
                   __word 6307691924616796078
                   __word 6129161134965750337
                   Database.Memcache.Errors.$fExceptionMemcacheError_wild
                   (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
b143f228ddc9f307d781199be90b7e3d
  $fExceptionMemcacheError2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MemErrOutOfMemory"#) -}
c6e626c5efad386e52fdd7767ad479e7
  $fExceptionMemcacheError3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MemErrUnknownCmd"#) -}
aeaad9c61ad258e746a5806f698ffa6b
  $fExceptionMemcacheError4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "MemErrValueNonNumeric"#) -}
9f44a274a9d0c561f154550dbb266f33
  $fExceptionMemcacheError5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MemErrStoreFailed"#) -}
224c8c76eb74dc5de8350e72b9645365
  $fExceptionMemcacheError6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MemErrInvalidArgs"#) -}
bc5bc238a11403893d5ec2f7b01ac463
  $fExceptionMemcacheError7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "MemErrValueTooLarge"#) -}
155a1df1cb872ba0974a2006e88534fa
  $fExceptionMemcacheError8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MemErrKeyExists"#) -}
4d01ce7553db7e6f40b9b690ecdc89f0
  $fExceptionMemcacheError9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MemErrNoKey"#) -}
b7291049f3eecbbd1edd21fd38d153d3
  $fExceptionMemcacheError_$cdisplayException ::
    Database.Memcache.Errors.MemcacheError -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Database.Memcache.Errors.$fExceptionMemcacheError_$cshow -}
b7291049f3eecbbd1edd21fd38d153d3
  $fExceptionMemcacheError_$cfromException ::
    GHC.Exception.SomeException
    -> GHC.Base.Maybe Database.Memcache.Errors.MemcacheError
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ eta :: GHC.Exception.SomeException ->
                 case eta of wild { GHC.Exception.SomeException e10 $dException1 e2 ->
                 case (GHC.Exception.$p1Exception @ e10 $dException1)
                        `cast`
                      (Data.Typeable.Internal.NTCo:Typeable[0] <*>_N <e10>_N)
                        (GHC.Prim.proxy#
                           @ *
                           @ e10) of wild1 { Data.Typeable.Internal.TypeRep dt dt1 ds2 ds3 ds4 ->
                 case dt of wild2 {
                   DEFAULT
                   -> GHC.Base.Nothing @ Database.Memcache.Errors.MemcacheError
                   __word 6307691924616796078
                   -> case dt1 of wild3 {
                        DEFAULT
                        -> GHC.Base.Nothing @ Database.Memcache.Errors.MemcacheError
                        __word 6129161134965750337
                        -> GHC.Base.Just
                             @ Database.Memcache.Errors.MemcacheError
                             e2
                               `cast`
                             (UnivCo mkUnsafeCo representational e10 Database.Memcache.Errors.MemcacheError) } } } }) -}
b7291049f3eecbbd1edd21fd38d153d3
  $fExceptionMemcacheError_$cshow ::
    Database.Memcache.Errors.MemcacheError -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Database.Memcache.Errors.MemcacheError ->
                 Database.Memcache.Errors.$fExceptionMemcacheError_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b7291049f3eecbbd1edd21fd38d153d3
  $fExceptionMemcacheError_$cshowsPrec ::
    GHC.Types.Int
    -> Database.Memcache.Errors.MemcacheError -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: Database.Memcache.Errors.MemcacheError
                   w2 :: GHC.Base.String ->
                 Database.Memcache.Errors.$w$cshowsPrec w1 w2) -}
b7291049f3eecbbd1edd21fd38d153d3
  $fExceptionMemcacheError_$ctoException ::
    Database.Memcache.Errors.MemcacheError
    -> GHC.Exception.SomeException
  {- Arity: 1 -}
598141abd2458010fe6f799ad5d58b1b
  $fExceptionMemcacheError_wild :: Data.Typeable.Internal.TyCon
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TyCon
                   __word 6307691924616796078
                   __word 6129161134965750337
                   Database.Memcache.Errors.$fExceptionClientError_ww3
                   Database.Memcache.Errors.$fExceptionClientError_ww1
                   Database.Memcache.Errors.$fExceptionMemcacheError_ww5) -}
11c40a0d657307017abd1891a57d2215
  $fExceptionMemcacheError_ww5 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "MemcacheError"#) -}
fe05b8b9d6c9f7cff2e94ac63b9e5990
  $fShowClientError ::
    GHC.Show.Show Database.Memcache.Errors.ClientError
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Database.Memcache.Errors.ClientError
                  Database.Memcache.Errors.$fShowClientError_$cshowsPrec
                  Database.Memcache.Errors.$fExceptionClientError_$cshow
                  Database.Memcache.Errors.$fShowClientError_$cshowList -}
fe05b8b9d6c9f7cff2e94ac63b9e5990
  $fShowClientError1 ::
    Database.Memcache.Errors.ClientError -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*H><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Database.Memcache.Errors.ClientError
                   eta :: GHC.Base.String ->
                 case ds of wild { Database.Memcache.Errors.NotEnoughBytes ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      Database.Memcache.Errors.$fExceptionClientError1)
                   eta }) -}
fe05b8b9d6c9f7cff2e94ac63b9e5990
  $fShowClientError_$cshowList ::
    [Database.Memcache.Errors.ClientError] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Database.Memcache.Errors.ClientError
                   Database.Memcache.Errors.$fShowClientError1) -}
fe05b8b9d6c9f7cff2e94ac63b9e5990
  $fShowClientError_$cshowsPrec ::
    GHC.Types.Int
    -> Database.Memcache.Errors.ClientError -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*H><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: Database.Memcache.Errors.ClientError
                   eta :: GHC.Base.String ->
                 case ds1 of wild { Database.Memcache.Errors.NotEnoughBytes ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      Database.Memcache.Errors.$fExceptionClientError1)
                   eta }) -}
b7291049f3eecbbd1edd21fd38d153d3
  $fShowMemcacheError ::
    GHC.Show.Show Database.Memcache.Errors.MemcacheError
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Database.Memcache.Errors.MemcacheError
                  Database.Memcache.Errors.$fExceptionMemcacheError_$cshowsPrec
                  Database.Memcache.Errors.$fExceptionMemcacheError_$cshow
                  Database.Memcache.Errors.$fShowMemcacheError_$cshowList -}
b7291049f3eecbbd1edd21fd38d153d3
  $fShowMemcacheError_$cshowList ::
    [Database.Memcache.Errors.MemcacheError] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Database.Memcache.Errors.MemcacheError
                   Database.Memcache.Errors.$w$cshowsPrec) -}
b7291049f3eecbbd1edd21fd38d153d3
  $w$cshowsPrec ::
    Database.Memcache.Errors.MemcacheError
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: Database.Memcache.Errors.MemcacheError
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   Database.Memcache.Errors.MemErrNoKey
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Database.Memcache.Errors.$fExceptionMemcacheError9
                        w1
                   Database.Memcache.Errors.MemErrKeyExists
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Database.Memcache.Errors.$fExceptionMemcacheError8
                        w1
                   Database.Memcache.Errors.MemErrValueTooLarge
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Database.Memcache.Errors.$fExceptionMemcacheError7
                        w1
                   Database.Memcache.Errors.MemErrInvalidArgs
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Database.Memcache.Errors.$fExceptionMemcacheError6
                        w1
                   Database.Memcache.Errors.MemErrStoreFailed
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Database.Memcache.Errors.$fExceptionMemcacheError5
                        w1
                   Database.Memcache.Errors.MemErrValueNonNumeric
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Database.Memcache.Errors.$fExceptionMemcacheError4
                        w1
                   Database.Memcache.Errors.MemErrUnknownCmd
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Database.Memcache.Errors.$fExceptionMemcacheError3
                        w1
                   Database.Memcache.Errors.MemErrOutOfMemory
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Database.Memcache.Errors.$fExceptionMemcacheError2
                        w1
                   Database.Memcache.Errors.MemErrAuthFail
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Database.Memcache.Errors.$fExceptionMemcacheError1
                        w1 }) -}
fe05b8b9d6c9f7cff2e94ac63b9e5990
  data ClientError = NotEnoughBytes
    Promotable
b7291049f3eecbbd1edd21fd38d153d3
  data MemcacheError
    = MemErrNoKey
    | MemErrKeyExists
    | MemErrValueTooLarge
    | MemErrInvalidArgs
    | MemErrStoreFailed
    | MemErrValueNonNumeric
    | MemErrUnknownCmd
    | MemErrOutOfMemory
    | MemErrAuthFail
    Promotable
e2da5c9852c306f6bb8853a1c1eec192
  statusToError ::
    Database.Memcache.Types.Status
    -> Database.Memcache.Errors.MemcacheError
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ds :: Database.Memcache.Types.Status ->
                 case ds of wild {
                   Database.Memcache.Types.NoError
                   -> GHC.Err.error
                        @ Database.Memcache.Errors.MemcacheError
                        (GHC.Base.build
                           @ GHC.Types.Char
                           (\ @ b ->
                            GHC.CString.unpackFoldrCString#
                              @ b
                              "statusToError: called on NoError"#))
                   Database.Memcache.Types.ErrKeyNotFound
                   -> Database.Memcache.Errors.MemErrNoKey
                   Database.Memcache.Types.ErrKeyExists
                   -> Database.Memcache.Errors.MemErrKeyExists
                   Database.Memcache.Types.ErrValueTooLarge
                   -> Database.Memcache.Errors.MemErrValueTooLarge
                   Database.Memcache.Types.ErrInvalidArgs
                   -> Database.Memcache.Errors.MemErrInvalidArgs
                   Database.Memcache.Types.ErrItemNotStored
                   -> Database.Memcache.Errors.MemErrStoreFailed
                   Database.Memcache.Types.ErrValueNonNumeric
                   -> Database.Memcache.Errors.MemErrValueNonNumeric
                   Database.Memcache.Types.ErrUnknownCommand
                   -> Database.Memcache.Errors.MemErrUnknownCmd
                   Database.Memcache.Types.ErrOutOfMemory
                   -> Database.Memcache.Errors.MemErrOutOfMemory
                   Database.Memcache.Types.SaslAuthFail
                   -> Database.Memcache.Errors.MemErrAuthFail
                   Database.Memcache.Types.SaslAuthContinue
                   -> GHC.Err.error
                        @ Database.Memcache.Errors.MemcacheError
                        (GHC.Base.build
                           @ GHC.Types.Char
                           (\ @ b ->
                            GHC.CString.unpackFoldrCString#
                              @ b
                              "statusToError: called on SaslAuthContinue"#)) }) -}
f478ead1e2d71f13c62ecfb231779cc1
  throwIncorrectRes ::
    Database.Memcache.Types.Response
    -> GHC.Base.String -> GHC.Types.IO a
  {- Arity: 3, Strictness: <B,U(U,U,U,U)><B,1*U><B,U>b,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a2
                   r :: Database.Memcache.Types.Response
                   msg :: GHC.Base.String
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (GHC.IO.throwIO
                    @ Database.Memcache.Types.IncorrectResponse
                    @ a2
                    Database.Memcache.Types.$fExceptionIncorrectResponse
                    (Database.Memcache.Types.IncorrectResponse
                       (GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                           GHC.CString.unpackFoldrCString# @ b "Expected "# c n)
                          (GHC.Base.augment
                             @ GHC.Types.Char
                             (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                              GHC.Base.foldr @ GHC.Types.Char @ b c n msg)
                             (GHC.Base.augment
                                @ GHC.Types.Char
                                (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                                 GHC.CString.unpackFoldrCString# @ b " response! Got: "# c n)
                                (Database.Memcache.Types.$fShowOpResponse_$cshow
                                   (Database.Memcache.Types.resOp r)))))
                       r))
                   `cast`
                 (GHC.Types.NTCo:IO[0] <a2>_R)
                   eta)
                  `cast`
                (forall a2.
                 <Database.Memcache.Types.Response>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <a2>_R)) -}
e89ca9d8ac3aeb028ace78d7f4e97e7e
  throwStatus :: Database.Memcache.Types.Status -> GHC.Types.IO a
  {- Arity: 2, Strictness: <B,1*U><B,U>b,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ a2
                   x :: Database.Memcache.Types.Status
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (GHC.IO.throwIO
                    @ Database.Memcache.Errors.MemcacheError
                    @ a2
                    Database.Memcache.Errors.$fExceptionMemcacheError
                    (Database.Memcache.Errors.statusToError x))
                   `cast`
                 (GHC.Types.NTCo:IO[0] <a2>_R)
                   eta)
                  `cast`
                (forall a2.
                 <Database.Memcache.Types.Status>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <a2>_R)) -}
instance GHC.Classes.Eq [Database.Memcache.Errors.ClientError]
  = Database.Memcache.Errors.$fEqClientError
instance GHC.Classes.Eq [Database.Memcache.Errors.MemcacheError]
  = Database.Memcache.Errors.$fEqMemcacheError
instance GHC.Exception.Exception [Database.Memcache.Errors.ClientError]
  = Database.Memcache.Errors.$fExceptionClientError
instance GHC.Exception.Exception [Database.Memcache.Errors.MemcacheError]
  = Database.Memcache.Errors.$fExceptionMemcacheError
instance GHC.Show.Show [Database.Memcache.Errors.ClientError]
  = Database.Memcache.Errors.$fShowClientError
instance GHC.Show.Show [Database.Memcache.Errors.MemcacheError]
  = Database.Memcache.Errors.$fShowMemcacheError
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

