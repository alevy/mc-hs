
==================== FINAL INTERFACE ====================
2016-02-25 11:05:43.816689 UTC

interface memca_3Z8qUpsEDiC53dYw3oq6HZ:Database.Memcache.Server 7103
  interface hash: 800edaa17f925529a76bbb5576e35224
  ABI hash: 7935f876b3050e69916f6708b334cea7
  export-list hash: 4b4f03728680b2d70aa3fff298403484
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e603fd4216aaa758bc4cd8b012d60987
  sig of: Nothing
  used TH splices: False
  where
exports:
  Database.Memcache.Server.close
  Database.Memcache.Server.newServer
  Database.Memcache.Server.sendRecv
  Database.Memcache.Server.withSocket
  Database.Memcache.Server.Server{Database.Memcache.Server.sid}
module dependencies: Database.Memcache.Errors
                     Database.Memcache.SASL Database.Memcache.Types
                     Database.Memcache.Wire
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0 binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      blaze-builder-0.4.0.1@blaze_GoSGMrJXTmeEBoF3sgxwrM
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_8GjadD03dR57AKCJdr90LD integer-gmp-1.0.0.0
                      monad-control-1.0.0.5@monad_0V0Z5ArSaI68lPP0A0bpaP
                      network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      resource-pool-0.2.3.2@resou_IPeOzEJlakZ6oei4wPpERj
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-base-0.4.4@trans_74WedXVmfaHHDJItmBRTVp
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_8GjadD03dR57AKCJdr90LD:Data.Hashable.Generic
         network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket
         network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket.Types
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text
         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text.Lazy
         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text.Show
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         monad-control-1.0.0.5@monad_0V0Z5ArSaI68lPP0A0bpaP:Control.Monad.Trans.Control
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text
                         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text.Lazy
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
import  -/  base-4.8.2.0:Control.Exception e9090e246fba030faecf7b81b3e8e320
import  -/  base-4.8.2.0:Control.Exception.Base b99410eaf0cc6bb119b1d45a497c1b10
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Enum debc6de3086023a15993ab0cecffb90b
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  hashable-1.2.4.0@hasha_8GjadD03dR57AKCJdr90LD:Data.Hashable 244dab13cdbae2b410cb0a7483f1e9a9
import  -/  hashable-1.2.4.0@hasha_8GjadD03dR57AKCJdr90LD:Data.Hashable.Class 7c18f94abf1ad2af4fd9379b4f2e951a
import  -/  Database.Memcache.SASL 8c06d13688d34b1f5fac6f290fb2a701
  exports: 117dc2fa2bdf46e3e98dd760055636d4
  authenticate e5ee299f98656dbdfff8d417a65f887d
import  -/  Database.Memcache.Types 1ca9931bda88d72b9d7d6f6ee335bcb6
  exports: b2f7697915662eeadb8e65de002e666b
  Authentication 8ea464ac72c68def1a36ff30f351146e
  Request ea22f4eb312eac51b3d37628818241fd
  Response 900e0e3188debaef4afb10615d76a76e
import  -/  Database.Memcache.Wire b9c0413f04d6ed449b906738485bee6f
  exports: c3c576dab15c3e91d5a4630c80e279e4
  recv 302e26b1b4927d798cf7479cc865b7b2
  send a9beebe72f375b15f7f3e22325124ac1
import  -/  network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.BSD 56792c538d26a7c6463f0fcfac9d2f1d
import  -/  network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket 1c584aab086538b6f7ab7390a01794f4
import  -/  network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket.Types c793d129fc346c1acee134cf761972a9
import  -/  resource-pool-0.2.3.2@resou_IPeOzEJlakZ6oei4wPpERj:Data.Pool 1e77b05f91c2c1492ca86f558f7ed223
import  -/  time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Clock d187f9ce1132a97c33b2032a6709adce
import  -/  time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Clock.UTC 904e7d633bb4c7cd80e960f3f4d7c4e1
0e49d261e0c691d9caf4b6f494d266da
  $fEqServer :: GHC.Classes.Eq Database.Memcache.Server.Server
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Database.Memcache.Server.Server
                  Database.Memcache.Server.$fEqServer_$c==
                  Database.Memcache.Server.$fEqServer_$c/= -}
0e49d261e0c691d9caf4b6f494d266da
  $fEqServer_$c/= ::
    Database.Memcache.Server.Server
    -> Database.Memcache.Server.Server -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ x :: Database.Memcache.Server.Server
                   y :: Database.Memcache.Server.Server ->
                 GHC.Classes.not (Database.Memcache.Server.$fEqServer_$c== x y)) -}
0e49d261e0c691d9caf4b6f494d266da
  $fEqServer_$c== ::
    Database.Memcache.Server.Server
    -> Database.Memcache.Server.Server -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLSS),1*U(U,A,1*H,A,1*H,1*H)><S(LLSLSS),1*U(U,A,1*H,A,1*H,1*H)>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Database.Memcache.Server.Server
                   y :: Database.Memcache.Server.Server ->
                 case x of wild { Database.Memcache.Server.Server dt ds ds1 dt1 ds2 ds3 ->
                 case y of wild1 { Database.Memcache.Server.Server dt2 ds4 ds5 dt3 ds6 ds7 ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# dt dt2) } }) -}
0e49d261e0c691d9caf4b6f494d266da
  $fOrdServer :: GHC.Classes.Ord Database.Memcache.Server.Server
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Database.Memcache.Server.Server
                  Database.Memcache.Server.$fEqServer
                  Database.Memcache.Server.$fOrdServer_$ccompare
                  Database.Memcache.Server.$fOrdServer_$c<
                  Database.Memcache.Server.$fOrdServer_$c<=
                  Database.Memcache.Server.$fOrdServer_$c>
                  Database.Memcache.Server.$fOrdServer_$c>=
                  Database.Memcache.Server.$fOrdServer_$cmax
                  Database.Memcache.Server.$fOrdServer_$cmin -}
0e49d261e0c691d9caf4b6f494d266da
  $fOrdServer_$c< ::
    Database.Memcache.Server.Server
    -> Database.Memcache.Server.Server -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLSS),1*U(U,A,1*H,A,1*H,1*H)><S(LLSLSS),1*U(U,A,1*H,A,1*H,1*H)>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Database.Memcache.Server.Server
                   y :: Database.Memcache.Server.Server ->
                 case x of wild { Database.Memcache.Server.Server dt ds ds1 dt1 ds2 ds3 ->
                 case y of wild1 { Database.Memcache.Server.Server dt2 ds4 ds5 dt3 ds6 ds7 ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# dt dt2) } }) -}
0e49d261e0c691d9caf4b6f494d266da
  $fOrdServer_$c<= ::
    Database.Memcache.Server.Server
    -> Database.Memcache.Server.Server -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLSS),1*U(U,A,1*H,A,1*H,1*H)><S(LLSLSS),1*U(U,A,1*H,A,1*H,1*H)>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Database.Memcache.Server.Server
                   y :: Database.Memcache.Server.Server ->
                 case x of wild { Database.Memcache.Server.Server dt ds ds1 dt1 ds2 ds3 ->
                 case y of wild1 { Database.Memcache.Server.Server dt2 ds4 ds5 dt3 ds6 ds7 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# dt dt2) of wild2 {
                   GHC.Types.False
                   -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# dt dt2)
                   GHC.Types.True -> GHC.Types.True } } }) -}
0e49d261e0c691d9caf4b6f494d266da
  $fOrdServer_$c> ::
    Database.Memcache.Server.Server
    -> Database.Memcache.Server.Server -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLSS),1*U(U,A,1*H,A,1*H,1*H)><S(LLSLSS),1*U(U,A,1*H,A,1*H,1*H)>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Database.Memcache.Server.Server
                   y :: Database.Memcache.Server.Server ->
                 case x of wild { Database.Memcache.Server.Server dt ds ds1 dt1 ds2 ds3 ->
                 case y of wild1 { Database.Memcache.Server.Server dt2 ds4 ds5 dt3 ds6 ds7 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# dt dt2) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# dt dt2) of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False }
                   GHC.Types.True -> GHC.Types.False } } }) -}
0e49d261e0c691d9caf4b6f494d266da
  $fOrdServer_$c>= ::
    Database.Memcache.Server.Server
    -> Database.Memcache.Server.Server -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLSS),1*U(U,A,1*H,A,1*H,1*H)><S(LLSLSS),1*U(U,A,1*H,A,1*H,1*H)>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Database.Memcache.Server.Server
                   y :: Database.Memcache.Server.Server ->
                 case x of wild { Database.Memcache.Server.Server dt ds ds1 dt1 ds2 ds3 ->
                 case y of wild1 { Database.Memcache.Server.Server dt2 ds4 ds5 dt3 ds6 ds7 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# dt dt2) of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
0e49d261e0c691d9caf4b6f494d266da
  $fOrdServer_$ccompare ::
    Database.Memcache.Server.Server
    -> Database.Memcache.Server.Server -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLSS),1*U(U,A,1*H,A,1*H,1*H)><S(LLSLSS),1*U(U,A,1*H,A,1*H,1*H)>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Database.Memcache.Server.Server
                   y :: Database.Memcache.Server.Server ->
                 case x of wild { Database.Memcache.Server.Server dt ds ds1 dt1 ds2 ds3 ->
                 case y of wild1 { Database.Memcache.Server.Server dt2 ds4 ds5 dt3 ds6 ds7 ->
                 GHC.Classes.compareInt# dt dt2 } }) -}
0e49d261e0c691d9caf4b6f494d266da
  $fOrdServer_$cmax ::
    Database.Memcache.Server.Server
    -> Database.Memcache.Server.Server
    -> Database.Memcache.Server.Server
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLSS),1*U(U,U,U,U,U,U)><S(LLSLSS),1*U(U,U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Database.Memcache.Server.Server
                   y :: Database.Memcache.Server.Server ->
                 case x of wild { Database.Memcache.Server.Server dt ds ds1 dt1 ds2 ds3 ->
                 case y of wild1 { Database.Memcache.Server.Server dt2 ds4 ds5 dt3 ds6 ds7 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# dt dt2) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# dt dt2) of wild3 {
                        GHC.Types.False -> wild GHC.Types.True -> wild1 }
                   GHC.Types.True -> wild1 } } }) -}
0e49d261e0c691d9caf4b6f494d266da
  $fOrdServer_$cmin ::
    Database.Memcache.Server.Server
    -> Database.Memcache.Server.Server
    -> Database.Memcache.Server.Server
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLSS),1*U(U,U,U,U,U,U)><S(LLSLSS),1*U(U,U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Database.Memcache.Server.Server
                   y :: Database.Memcache.Server.Server ->
                 case x of wild { Database.Memcache.Server.Server dt ds ds1 dt1 ds2 ds3 ->
                 case y of wild1 { Database.Memcache.Server.Server dt2 ds4 ds5 dt3 ds6 ds7 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# dt dt2) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# dt dt2) of wild3 {
                        GHC.Types.False -> wild1 GHC.Types.True -> wild }
                   GHC.Types.True -> wild } } }) -}
0e49d261e0c691d9caf4b6f494d266da
  $fShowServer :: GHC.Show.Show Database.Memcache.Server.Server
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Database.Memcache.Server.Server
                  Database.Memcache.Server.$fShowServer_$cshowsPrec
                  Database.Memcache.Server.$fShowServer_$cshow
                  Database.Memcache.Server.$fShowServer_$cshowList -}
0e49d261e0c691d9caf4b6f494d266da
  $fShowServer1 :: Database.Memcache.Server.Server -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Database.Memcache.Server.Server ->
                 case w of ww { Database.Memcache.Server.Server ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Database.Memcache.Server.$w$cshowsPrec
                   0
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
0e49d261e0c691d9caf4b6f494d266da
  $fShowServer_$cshow ::
    Database.Memcache.Server.Server -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S(LLSLSS),1*U(U,U(A,A,U(U),U,U(U),A,A),U,U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Database.Memcache.Server.Server ->
                 Database.Memcache.Server.$fShowServer_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0e49d261e0c691d9caf4b6f494d266da
  $fShowServer_$cshowList ::
    [Database.Memcache.Server.Server] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Database.Memcache.Server.Server
                   Database.Memcache.Server.$fShowServer1) -}
0e49d261e0c691d9caf4b6f494d266da
  $fShowServer_$cshowsPrec ::
    GHC.Types.Int -> Database.Memcache.Server.Server -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S,1*U(U)><S(LLSLSS),1*U(U,U(A,A,U(U),U,U(U),A,A),U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Database.Memcache.Server.Server ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Database.Memcache.Server.Server ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Database.Memcache.Server.$w$cshowsPrec
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8 } }) -}
5560e3f5bde3f724a132d84750e9add2
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Pool.Pool Network.Socket.Types.Socket
    -> Network.Socket.HostName
    -> GHC.Prim.Word#
    -> Database.Memcache.Types.Authentication
    -> GHC.Types.Bool
    -> GHC.Show.ShowS
  {- Arity: 7,
     Strictness: <L,U><L,U><L,U(A,A,U(U),U,U(U),A,A)><S,U><L,U><S,U><S,U>,
     Inline: [0] -}
0e49d261e0c691d9caf4b6f494d266da
  data Server
    = Server {sid :: {-# UNPACK #-}GHC.Types.Int,
              pool :: Data.Pool.Pool Network.Socket.Types.Socket,
              _addr :: !Network.Socket.HostName,
              _port :: ! {-# UNPACK #-}(Network.Socket.Types.NTCo:PortNumber[0])Network.Socket.Types.PortNumber,
              _auth :: !Database.Memcache.Types.Authentication,
              failed :: !GHC.Types.Bool}
69cfb7a5b89b23661acd533bc2974e58
  _addr :: Database.Memcache.Server.Server -> Network.Socket.HostName
  RecSel Database.Memcache.Server.Server
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLSS),1*U(A,A,U,A,1*H,1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Database.Memcache.Server.Server ->
                 case ds of wild { Database.Memcache.Server.Server dt ds1 ds2 dt1 ds3 ds4 ->
                 ds2 }) -}
6f03ecb8102011fb4750ec5d6ddd9d5f
  _auth ::
    Database.Memcache.Server.Server
    -> Database.Memcache.Types.Authentication
  RecSel Database.Memcache.Server.Server
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLSS),1*U(A,A,1*H,A,U,1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Database.Memcache.Server.Server ->
                 case ds of wild { Database.Memcache.Server.Server dt ds1 ds2 dt1 ds3 ds4 ->
                 ds3 }) -}
82873b249f347afb25bb2b95e9eb487a
  _port ::
    Database.Memcache.Server.Server -> Network.Socket.Types.PortNumber
  RecSel Database.Memcache.Server.Server
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLSS),1*U(A,A,1*H,U,1*H,1*H)>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Database.Memcache.Server.Server ->
                 case ds of wild { Database.Memcache.Server.Server dt ds1 ds2 dt1 ds3 ds4 ->
                 (GHC.Word.W16# dt1)
                   `cast`
                 (Sym (Network.Socket.Types.NTCo:PortNumber[0])) }) -}
4e137c4fa0a57f83268e11aaca402944
  close :: Database.Memcache.Server.Server -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS(LLLLLSL)SLSS),1*U(A,1*U(A,C(C1(U)),A,A,A,1*U(U,U,U),A),1*H,A,1*H,1*H)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Database.Memcache.Server.close1
                  `cast`
                (<Database.Memcache.Server.Server>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
68feb0d5bd7b06cf2659f63bfa27cc0d
  close1 ::
    Database.Memcache.Server.Server
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS(LLLLLSL)SLSS),1*U(A,1*U(A,C(C1(U)),A,A,A,1*U(U,U,U),A),1*H,A,1*H,1*H)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ srv :: Database.Memcache.Server.Server
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case srv of wild { Database.Memcache.Server.Server dt ds ds1 dt1 ds2 ds3 ->
                 Data.Pool.destroyAllResources1
                   @ Network.Socket.Types.Socket
                   ds
                   eta }) -}
4c4a8f5ccd04cc1eb568932c52a8bfd9
  failed :: Database.Memcache.Server.Server -> GHC.Types.Bool
  RecSel Database.Memcache.Server.Server
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLSS),1*U(A,A,1*H,A,1*H,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Database.Memcache.Server.Server ->
                 case ds of wild { Database.Memcache.Server.Server dt ds1 ds2 dt1 ds3 ds4 ->
                 ds4 }) -}
17ce5f3cc27f7615525b26d7541a07d4
  newServer ::
    Network.Socket.HostName
    -> Network.Socket.Types.PortNumber
    -> Database.Memcache.Types.Authentication
    -> GHC.Types.IO Database.Memcache.Server.Server
  {- Arity: 4, Strictness: <L,U><L,U(U)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Database.Memcache.Server.newServer1
                  `cast`
                (<Network.Socket.HostName>_R
                 ->_R <Network.Socket.Types.PortNumber>_R
                 ->_R <Database.Memcache.Types.Authentication>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <Database.Memcache.Server.Server>_R)) -}
6e543a4d9ee13b86cb6ae86a1062ffb1
  newServer1 ::
    Network.Socket.HostName
    -> Network.Socket.Types.PortNumber
    -> Database.Memcache.Types.Authentication
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Database.Memcache.Server.Server #)
  {- Arity: 4, Strictness: <L,U><L,U(U)><L,U><L,U> -}
d7663426184d720fc82f3690c2f9d11b
  pool ::
    Database.Memcache.Server.Server
    -> Data.Pool.Pool Network.Socket.Types.Socket
  RecSel Database.Memcache.Server.Server
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSSLSS),1*U(A,1*U(U,U,U,U,U,U,U),1*H,A,1*H,1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Database.Memcache.Server.Server ->
                 case ds of wild { Database.Memcache.Server.Server dt ds1 ds2 dt1 ds3 ds4 ->
                 ds1 }) -}
e094f0841f992b5efa60eac61471d6bb
  sendRecv ::
    Database.Memcache.Server.Server
    -> Database.Memcache.Types.Request
    -> GHC.Types.IO Database.Memcache.Types.Response
  {- Arity: 3,
     Strictness: <L,1*U(A,1*U(C(U),1*C1(C1(U)),1*U(1*U),A,1*U(U),U(U,U,U),A),1*H,A,1*H,1*H)><L,U(U,U(U),U(U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Database.Memcache.Server.sendRecv1
                  `cast`
                (<Database.Memcache.Server.Server>_R
                 ->_R <Database.Memcache.Types.Request>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <Database.Memcache.Types.Response>_R)) -}
ff6bb1f7e4b64be5119b175b174ad408
  sendRecv1 ::
    Database.Memcache.Server.Server
    -> Database.Memcache.Types.Request
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Database.Memcache.Types.Response #)
  {- Arity: 3,
     Strictness: <L,1*U(A,1*U(C(U),1*C1(C1(U)),1*U(1*U),A,1*U(U),U(U,U,U),A),1*H,A,1*H,1*H)><L,U(U,U(U),U(U))><L,U>,
     Unfolding: (\ svr :: Database.Memcache.Server.Server
                   msg :: Database.Memcache.Types.Request
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Data.Pool.withResource1
                   @ Network.Socket.Types.Socket
                   @ Database.Memcache.Types.Response
                   (case svr of wild { Database.Memcache.Server.Server dt ds ds1 dt1 ds2 ds3 ->
                    ds })
                   (\ s :: Network.Socket.Types.Socket[OneShot]
                      eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                    case s of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                    case Database.Memcache.Wire.$wa4
                           ww1
                           msg
                           eta1 of ds1 { (#,#) ipv ipv1 ->
                    Database.Memcache.Wire.recv1 ww ipv } })
                     `cast`
                   (<Network.Socket.Types.Socket>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0]
                                  <Database.Memcache.Types.Response>_R))
                   eta) -}
f990adb067c6fae8ebefb59476c64f15
  sid :: Database.Memcache.Server.Server -> GHC.Types.Int
  RecSel Database.Memcache.Server.Server
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLSS),1*U(U,A,1*H,A,1*H,1*H)>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Database.Memcache.Server.Server ->
                 case ds of wild { Database.Memcache.Server.Server dt ds1 ds2 dt1 ds3 ds4 ->
                 GHC.Types.I# dt }) -}
1bc87112c88d735c7644881c086d9400
  withSocket ::
    Database.Memcache.Server.Server
    -> (Network.Socket.Types.Socket -> GHC.Types.IO a)
    -> GHC.Types.IO a
  {- Arity: 3,
     Strictness: <L,1*U(A,1*U(C(U),1*C1(C1(U)),1*U(1*U),A,1*U(U),U(U,U,U),A),1*H,A,1*H,1*H)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Database.Memcache.Server.withSocket1
                  `cast`
                (forall a1.
                 <Database.Memcache.Server.Server>_R
                 ->_R <Network.Socket.Types.Socket -> GHC.Types.IO a1>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <a1>_R)) -}
844f1dcdc14e5f449a16e65bad9f3962
  withSocket1 ::
    Database.Memcache.Server.Server
    -> (Network.Socket.Types.Socket -> GHC.Types.IO a)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 3,
     Strictness: <L,1*U(A,1*U(C(U),1*C1(C1(U)),1*U(1*U),A,1*U(U),U(U,U,U),A),1*H,A,1*H,1*H)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a1
                   svr :: Database.Memcache.Server.Server
                   eta :: Network.Socket.Types.Socket -> GHC.Types.IO a1
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Data.Pool.withResource1
                   @ Network.Socket.Types.Socket
                   @ a1
                   (case svr of wild { Database.Memcache.Server.Server dt ds ds1 dt1 ds2 ds3 ->
                    ds })
                   eta
                   eta1) -}
instance GHC.Classes.Eq [Database.Memcache.Server.Server]
  = Database.Memcache.Server.$fEqServer
instance GHC.Classes.Ord [Database.Memcache.Server.Server]
  = Database.Memcache.Server.$fOrdServer
instance GHC.Show.Show [Database.Memcache.Server.Server]
  = Database.Memcache.Server.$fShowServer
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

